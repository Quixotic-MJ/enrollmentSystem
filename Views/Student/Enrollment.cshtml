@* @model enrollmentSystem.Models.Student *@
@{
Layout = null;
var student = ViewBag.Student as enrollmentSystem.Models.Student;
var academicYears = ViewBag.AcademicYears as List<enrollmentSystem.Models.AcademicYear>;
var programs = ViewBag.Programs as List<enrollmentSystem.Models.AcademicProgram>;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enrollment - Enrollment System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">
<div class="container mx-auto px-4 py-8 flex-grow">
    <h1 class="text-3xl font-bold mb-4">Student Enrollment</h1>
    <p class="text-lg text-gray-700 mb-6">Begin your enrollment process, select subjects, and confirm your course load
        for the upcoming academic term.</p>

    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h5 class="text-xl font-semibold mb-4">Student Information</h5>

        <form id="enrollmentForm">
            <div class="grid grid-cols-1 md:grid-cols-6 gap-4 mb-4">
                <div class="md:col-span-2">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Student ID</label>
                    <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                           value="@student.Stud_Id" readonly>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Academic Year</label>
                    <select
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        name="AcademicYear" id="schoolYear">
                        <option selected disabled>Choose S.Y...</option>
                        @foreach (var year in academicYears)
                        {
                        <option value="@year.Year">@year.Year</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Semester</label>
                    <select
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        name="enrollmentSemester" id="enrollmentSemester">
                        <option selected disabled>Choose...</option>
                        <option value="1st Semester">1st Semester</option>
                        <option value="2nd Semester">2nd Semester</option>
                        <option value="Summer">Summer</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Student Status</label>
                    <select
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        name="studentStatus" id="studentStatus">
                        <option selected disabled>Choose...</option>
                        <option value="Regular">Regular</option>
                        <option value="Irregular">Irregular</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Enrollment Status</label>
                    <select
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        name="enrollmentStatus">
                        <option selected disabled>Choose...</option>
                        <option value="New">New</option>
                        <option value="Old">Old</option>
                        <option value="Transferee">Transferee</option>
                        <option value="Cross-Enrollee">Cross-Enrollee</option>
                    </select>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                    <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                           value="@student.Stud_Lname">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                    <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                           value="@student.Stud_Fname">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Middle Name</label>
                    <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                           value="@student.Stud_Mname">
                </div>
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Home Address</label>
                <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                       value="@student.Stud_Address">
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Contact Number</label>
                    <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                           value="@student.Stud_Contact">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                    <input type="email" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                           value="@student.Stud_Email">
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Year Level</label>
                    <select
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        name="yearLevel" id="yearLevel">
                        <option selected disabled>Choose...</option>
                        <option value="1st Year">1st Year</option>
                        <option value="2nd Year" >2nd Year</option>
                        <option value="3rd Year" >3rd Year</option>
                        <option value="4th Year" >4th Year</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Program</label>
                    <select
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        name="program" id="program">
                        <option value="" selected disabled>Choose Program...</option>
                      
                    </select>
                </div>
            </div>

            <hr class="my-6 border-gray-200">

            @* <h5 class="text-xl font-semibold mb-2">Subject Selection</h5> *@
            <button type="button" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md mb-4 hidden"
                    id="selectSubjectsBtn">SELECT SUBJECTS
            </button>

            <div id="subjectSelectionArea" class="hidden">
                <h5 class="text-xl font-semibold mb-3">Available Subjects</h5>
                <div class="overflow-x-auto mb-6">
                    <table class="min-w-full divide-y divide-gray-200 border border-gray-200">
                        <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                COURSE CODE
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                DESCRIPTIVE TITLE
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Units
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Action
                            </th>
                        </tr>
                        </thead>
                        <tbody id="availableSubjectsTableBody" class="bg-white divide-y divide-gray-200">
                        </tbody>
                    </table>
                </div>

                <h6 class="text-lg font-medium mb-2">Selected Subjects</h6>
                <div class="overflow-x-auto mb-4">
                    <table class="min-w-full divide-y divide-gray-200 border border-gray-200">
                        <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                COURSE CODE
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                DESCRIPTIVE TITLE
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Units
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Action
                            </th>
                        </tr>
                        </thead>
                        <tbody id="selectedSubjectsTableBody" class="bg-white divide-y divide-gray-200">
                        </tbody>
                    </table>
                </div>
                <p class="text-gray-700 mt-3"><strong>Total Units:</strong> <span id="totalUnitsDisplay">0</span></p>
            </div>

            <div class="mt-6">
                <button type="button" id="confirmEnrollmentBtn" class="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-2 rounded-md">CONFIRM ENROLLMENT</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const studentStatus = document.getElementById('studentStatus');
        const selectSubjectsBtn = document.getElementById('selectSubjectsBtn');
        const subjectSelectionArea = document.getElementById('subjectSelectionArea');
        const yearLevel = document.getElementById('yearLevel');

        // --- Cascade: Added for dynamic program loading ---
        const schoolYearDropdown = document.getElementById('schoolYear');
        const programDropdown = document.getElementById('program');

        if (schoolYearDropdown && programDropdown) { // Ensure elements exist
            schoolYearDropdown.addEventListener('change', function() {
                const selectedYear = this.value;
                // Clear existing program options and add a loading message
                programDropdown.innerHTML = '<option value="" selected disabled>Loading programs...</option>';

                if (selectedYear) {
                    // Fetch programs for the selected academic year
                    fetch(`@Url.Action("GetProgramsForAcademicYear", "Student")?academicYear=${encodeURIComponent(selectedYear)}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(programs => {
                            programDropdown.innerHTML = '<option value="" selected disabled>Choose Program...</option>';
                            if (programs && programs.length > 0) {
                                programs.forEach(function (p) {
                                    const option = document.createElement('option');
                                    option.value = p.programCode;
                                    option.textContent = p.programName;
                                    programDropdown.appendChild(option);
                                });
                            } else {
                                const noProgramsOption = document.createElement('option');
                                noProgramsOption.textContent = 'No programs for this year';
                                noProgramsOption.disabled = true;
                                programDropdown.appendChild(noProgramsOption);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching or processing programs:', error);
                            programDropdown.innerHTML = '<option value="" selected disabled>Error loading programs</option>';
                        });
                } else {
                    programDropdown.innerHTML = '<option value="" selected disabled>Choose Program...</option>';
                }
            });
        }

        // --- Subject Selection Logic ---
        function populateTable(subjectsToDisplay) {
            if (!availableSubjectsTableBody) return;
            availableSubjectsTableBody.innerHTML = ''; // Clear existing rows

            if (!subjectsToDisplay || subjectsToDisplay.length === 0) {
                availableSubjectsTableBody.innerHTML = '<tr><td colspan="4" class="text-center text-gray-500 py-4">No subjects available for the current selection.</td></tr>';
                return;
            }

            console.log('subjectsToDisplay in populateTable:', subjectsToDisplay); // DEBUG
            subjectsToDisplay.forEach(subject => {
                console.log('Populating row with subject:', subject); // DEBUG
                const row = availableSubjectsTableBody.insertRow();
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">${subject.code}</td>
                    <td class="px-6 py-4">${subject.title}</td>
                    <td class="px-6 py-4 whitespace-nowrap">${subject.units}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <button type="button" class="text-blue-600 hover:text-blue-900 add-subject-btn"
                                data-code="${subject.code}" data-title="${subject.title}" data-units="${subject.units}">
                            Add
                        </button>
                    </td>
                `;
            });

            document.querySelectorAll('#availableSubjectsTableBody .add-subject-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    addSubjectToSelected(this.dataset.code, this.dataset.title, this.dataset.units);
                });
            });
        }

        function applyFiltersAndPopulateTable() {
            populateTable(allFetchedSubjects);
        }

        function loadAvailableSubjects() {
            if (!availableSubjectsTableBody) return;
            availableSubjectsTableBody.innerHTML = '<tr><td colspan="4" class="text-center text-gray-500 py-4">Loading subjects...</td></tr>';

            fetch(`@Url.Action("GetAvailableCourses", "Student")`)
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => { 
                            throw new Error(`Network response was not ok: ${response.status} ${response.statusText}. Server response: ${text}`); 
                        });
                    }
                    return response.json();
                })
                .then(coursesFromDb => {
                    console.log('Raw coursesFromDb:', coursesFromDb); // DEBUG
                    allFetchedSubjects = coursesFromDb.map(course => {
                        console.log('Mapping course:', course); // DEBUG
                        return {
                            code: course.crs_Code,    // Attempting camelCase from server response
                            title: course.crs_Title,
                            units: course.crs_Units
                        };
                    });
                    console.log('Mapped allFetchedSubjects:', allFetchedSubjects); // DEBUG
                    applyFiltersAndPopulateTable();
                })
                .catch(error => {
                    console.error('Error fetching available subjects:', error);
                    if (availableSubjectsTableBody) {
                        availableSubjectsTableBody.innerHTML = `<tr><td colspan="4" class="text-center text-red-500 py-4">Error loading subjects: ${error.message}. Please try again.</td></tr>`;
                    }
                });
        }

        // --- Event Listeners for UI interaction ---
        if (studentStatus) {
            studentStatus.addEventListener('change', function () {
                if (this.value === 'Irregular') {
                    if(selectSubjectsBtn) selectSubjectsBtn.classList.remove('hidden');
                } else {
                    if(selectSubjectsBtn) selectSubjectsBtn.classList.add('hidden');
                    if(subjectSelectionArea) subjectSelectionArea.classList.add('hidden');
                }
            });
        }

        if (enrollmentSemester) {
            enrollmentSemester.addEventListener('change', function () {
                if (studentStatus && studentStatus.value === 'Irregular') {
                    loadAvailableSubjects();
                }
            });
        }

        if (selectSubjectsBtn) {
            selectSubjectsBtn.addEventListener('click', function () {
                loadAvailableSubjects();
                if(subjectSelectionArea) subjectSelectionArea.classList.remove('hidden');
            });
        }

        // --- Selected Subjects Table Logic ---
        function addSubjectToSelected(code, title, units) {
            if (!selectedSubjectsTableBody) return;
            const existingRow = selectedSubjectsTableBody.querySelector(`tr[data-code="${code}"]`);
            if (existingRow) {
                alert('This subject is already selected.');
                return;
            }

            const row = selectedSubjectsTableBody.insertRow();
            row.setAttribute('data-code', code);
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">${code}</td>
                <td class="px-6 py-4 whitespace-nowrap">${title}</td>
                <td class="px-6 py-4 whitespace-nowrap">${units}</td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <button type="button" class="text-red-600 hover:text-red-900 remove-subject-btn">Remove</button>
                </td>
            `;
            row.querySelector('.remove-subject-btn').addEventListener('click', function (e) {
                e.preventDefault();
                this.closest('tr').remove();
                updateTotalUnits();
            });
            updateTotalUnits();
        }

        function updateTotalUnits() {
            if (!selectedSubjectsTableBody || !totalUnitsDisplay) return;
            let total = 0;
            selectedSubjectsTableBody.querySelectorAll('tr').forEach(row => {
                const unitsCell = row.cells[2]; // Assuming units is the 3rd column (index 2)
                if (unitsCell) {
                    total += parseInt(unitsCell.textContent) || 0;
                }
            });
            totalUnitsDisplay.textContent = total;
        }

        // --- Enrollment Confirmation ---
        if (confirmEnrollmentBtn) {
            confirmEnrollmentBtn.addEventListener('click', function (e) {
                e.preventDefault();
                const selectedSubjectsData = [];
                if (selectedSubjectsTableBody) {
                    selectedSubjectsTableBody.querySelectorAll('tr').forEach(row => {
                        selectedSubjectsData.push({
                            code: row.dataset.code,
                            title: row.cells[1].textContent,
                            units: parseInt(row.cells[2].textContent) || 0
                        });
                    });
                }

                const formData = {
                    academicYear: schoolYearDropdown ? schoolYearDropdown.value : '',
                    semester: enrollmentSemester ? enrollmentSemester.value : '',
                    studentStatus: studentStatus ? studentStatus.value : '',
                    enrollmentStatus: document.querySelector('select[name="enrollmentStatus"]') ? document.querySelector('select[name="enrollmentStatus"]').value : '',
                    yearLevel: yearLevel ? yearLevel.value : '',
                    program: programDropdown ? programDropdown.value : '',
                    subjects: selectedSubjectsData
                };
                console.log('Form submitted with data:', formData);
                alert('Enrollment submitted successfully! (Data logged to console)');
                // TODO: Send formData to the server via fetch POST request
            });
        }

    });
</script>
</body>
</html>