@{
ViewBag.Title = "Schedule Management";
Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        ::-webkit-scrollbar {
            width: 6px;
            height: 6px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }

        .validation-error {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }

        .form-select:invalid,
        .form-control:invalid {
            border-color: #dc3545;
        }

        /* Vue transition styles */
        .modal-enter-active,
        .modal-leave-active {
            transition: opacity 0.3s ease;
        }

        .modal-enter-from,
        .modal-leave-to {
            opacity: 0;
        }

        .modal-content-enter-active,
        .modal-content-leave-active {
            transition: all 0.3s ease;
        }

        .modal-content-enter-from,
        .modal-content-leave-to {
            opacity: 0;
            transform: scale(0.95);
        }

        /* Improved table styles */
        .schedule-table {
            width: 100%;
            table-layout: fixed;
            border-collapse: separate;
            border-spacing: 0;
        }

        .schedule-table th,
        .schedule-table td {
            width: 14.28%;
            padding: 0.75rem;
            vertical-align: top;
            border: 1px solid #e5e7eb;
        }

        .schedule-table th {
            background-color: #f8fafc;
            font-weight: 600;
            text-align: center;
            color: #334155;
            position: sticky;
            top: 0;
        }

        .schedule-table tr:hover td {
            background-color: #f8fafc;
        }

        .schedule-item {
            font-size: 0.8125rem;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
            border-radius: 0.375rem;
            background-color: #f0fdf4;
            color: #166534;
            word-break: break-word;
            border-left: 3px solid #22c55e;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .schedule-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .section-header {
            background-color: #f8fafc;
            border-radius: 0.5rem;
            padding: 1.25rem;
            margin-bottom: 1.5rem;
            border: 1px solid #e2e8f0;
        }

        .section-title {
            color: #1e293b;
            font-weight: 600;
            font-size: 1.125rem;
            margin-bottom: 0.5rem;
        }

        .section-detail {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
        }

        .detail-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #475569;
            font-size: 0.9375rem;
        }

        .detail-icon {
            color: #64748b;
        }

        .edit-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            color: #2563eb;
            font-weight: 500;
            padding: 0.375rem 0.75rem;
            border-radius: 0.375rem;
            transition: all 0.2s;
        }

        .edit-btn:hover {
            background-color: #eff6ff;
            color: #1d4ed8;
        }

        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-container {
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            padding: 1.25rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 1.25rem;
        }

        .modal-footer {
            padding: 1.25rem;
            border-top: 1px solid #e5e7eb;
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
        }
    </style>
</head>

<body class="bg-gray-50 min-h-screen flex flex-col" id="app">
    <form id="globalAntiForgeryTokenForm" style="display:none;">
        @Html.AntiForgeryToken()
    </form>
    <div class="container mx-auto px-4 py-8 flex-grow">
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-2xl font-bold text-gray-800">Schedule Management</h1>
                <p class="text-gray-600">Create and manage class schedules</p>
            </div>
            <button type="button"
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    v-on:click="showAddScheduleModal = true"
                    :disabled="isLoading">
                <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                </svg>
                Add Section
            </button>
        </div>

        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden mb-8">
            <div class="p-5 border-b border-gray-200">
                <h2 class="font-semibold text-lg text-gray-800">Filter Schedules</h2>
                <div class="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Programs</label>
                        <select
                            class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                            id="courseFilter">
                            <option value="">All Programs</option>
                            <option value="CS101">Computer Science</option>
                            <option value="CS102">BSIT</option>
                            <option value="CS103">BSIS</option>
                            <option value="CS104">BSED</option>
                        </select>
                    </div>
                </div>
            </div>





            <div class="relative overflow-x-auto">
                <table class="w-full text-sm text-center rtl:text-right text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-xl">
                                Schedules
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Loading state -->
                        <tr v-if="isLoading && sections.length === 0">
                            <td colspan="1" class="px-6 py-4 text-center">
                                <div class="flex justify-center items-center">
                                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <span>Loading sections...</span>
                                </div>
                            </td>
                        </tr>
                        
                        <!-- No sections message -->
                        <tr v-else-if="sections.length === 0">
                            <td colspan="1" class="px-6 py-12 text-center text-gray-500">
                                <div class="flex flex-col items-center">
                                    <svg class="h-12 w-12 text-gray-400 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                    </svg>
                                    <p class="text-lg font-medium">No sections found</p>
                                    <p class="text-sm">Create a new section to get started</p>
                                </div>
                            </td>
                        </tr>
                        
                        <!-- Sections list -->
                        <tr v-else v-for="section in sections" :key="section.id" class="bg-white border-b border-gray-200">
                            <td class="px-6 py-4">
                                <div class="p-6">
                                    <div class="section-header">
                                        <div class="flex justify-between items-start">
                                            <div class="flex-1">
                                                <div class="flex items-center gap-3">
                                                    <h3 class="section-title text-lg font-semibold text-gray-900">
                                                        {{ section.sectionName }} - {{ section.programName || 'N/A' }}
                                                    </h3>
                                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                        {{ section.curriculumCode }}
                                                    </span>
                                                </div>
                                                
                                                <div class="mt-2 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2">
                                                    <div class="flex items-start text-sm text-gray-600">
                                                        <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                        </svg>
                                                        <span>Semester: <strong>{{ section.semester || 'N/A' }}</strong></span>
                                                    </div>
                                                    
                                                    <div class="flex items-start text-sm text-gray-600">
                                                        <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                                        </svg>
                                                        <span>Year Level: <strong>{{ section.yearLevel || 'N/A' }}</strong></span>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div class="flex items-center space-x-2">
                                                <button class="text-blue-600 hover:text-blue-800 p-1 rounded-full hover:bg-blue-50" title="Edit Section">
                                                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                    </svg>
                                                </button>
                                                <button class="text-red-600 hover:text-red-800 p-1 rounded-full hover:bg-red-50" title="Delete Section">
                                                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Schedule Items -->
                                    <div class="mt-6">
                                        <div class="flex justify-between items-center mb-3">
                                            <h4 class="text-sm font-medium text-gray-700">Schedule Items</h4>
                                            <button type="button"
                                                    class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                                                    v-on:click="openAddScheduleModal(section)"
                                                    :disabled="isLoading">
                                                <svg class="-ml-0.5 mr-1.5 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                                </svg>
                                                Add Schedule Item
                                            </button>
                                        </div>
                                        
                                        <div v-if="section.schedules && section.schedules.length > 0" class="bg-gray-50 rounded-lg overflow-hidden">
                                            <table class="min-w-full divide-y divide-gray-200">
                                                <thead class="bg-gray-100">
                                                    <tr>
                                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Day</th>
                                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Course</th>
                                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Room</th>
                                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Instructor</th>
                                                        <th class="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody class="bg-white divide-y divide-gray-200">
                                                    <template v-for="schedule in section.schedules" :key="schedule.id">
                                                        <tr v-for="session in schedule.sessions" :key="session.id">
                                                            <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{{ session.day }}</td>
                                                            <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                                                {{ formatTime(session.startTime) }} - {{ formatTime(session.endTime) }}
                                                            </td>
                                                            <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                                                                {{ schedule.courseCode }} - {{ schedule.courseName }}
                                                            </td>
                                                            <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500">{{ schedule.room || 'N/A' }}</td>
                                                            <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500">{{ schedule.instructor || 'TBA' }}</td>
                                                            <td class="px-4 py-2 whitespace-nowrap text-right text-sm font-medium">
                                                                <button class="text-blue-600 hover:text-blue-900 mr-3" v-on:click="editScheduleItem(section, schedule)">
                                                                    <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                                    </svg>
                                                                </button>
                                                                <button class="text-red-600 hover:text-red-900" v-on:click="confirmDeleteScheduleItem(section, session)">
                                                                    <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                                    </svg>
                                                                </button>
                                                                <span v-if="isLoading && currentActionInfo.type === 'delete' && currentActionInfo.id === session.id" class="inline-block ml-2">
                                                                    <svg class="animate-spin h-4 w-4 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                                    </svg>
                                                                </span>
                                                            </td>
                                                        </tr>
                                                    </template>
                                                </tbody>
                                            </table>
                                        </div>
                                        <div v-else class="text-center py-4 text-sm text-gray-500 bg-white rounded-lg border border-dashed border-gray-300">
                                            No schedule items found. Add a schedule item to get started.
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>

                    </tbody>
                </table>
            </div>

        </div>
    </div>

    <div v-if="showAddScheduleModal" class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-gray-500 opacity-75" v-on:click="showAddScheduleModal = false"></div>
            </div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <transition name="modal-content">
                <div
                    class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
                    <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <div class="sm:flex sm:items-start">
                            <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Create New Section Schedule</h3>
                                <form id="addSectionForm" v-on:submit.prevent="createSection">
                                    @Html.AntiForgeryToken()
                                    <!-- Error message -->
                                    <div v-if="error" class="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                                        {{ error }}
                                    </div>
                                    
                                    <div class="grid grid-cols-1 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Program
                                                <span class="text-red-500">*</span>
                                            </label>
                                           <select v-model="newSection.curriculumCode" 
                                                   class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                                   :disabled="isLoading"
                                                   required>
                                               <option value="">Select Program</option>
                                              <option v-for="curriculum in curricula" 
                                                      :value="curriculum.curriculumCode">
                                                  {{ curriculum.programCode }} - {{ curriculum.program }} ({{ curriculum.academicYear }})
                                              </option>
                                           </select>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Section Name
                                                <span class="text-red-500">*</span>
                                            </label>
                                            <input type="text" 
                                                   v-model="newSection.sectionName" 
                                                   class="mt-1 block w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                                   placeholder="e.g., A, B, C" 
                                                   :disabled="isLoading"
                                                   required>
                                        </div>
                                        <div class="grid grid-cols-2 gap-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Semester
                                                    <span class="text-red-500">*</span>
                                                </label>
                                                <select v-model="newSection.semester" 
                                                        class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                                                        :disabled="isLoading"
                                                        required>
                                                    <option value="">Select Semester</option>
                                                    <option value="1st Semester">1st Semester</option>
                                                    <option value="2nd Semester">2nd Semester</option>
                                                    <option value="Summer">Summer</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-1">Year Level
                                                    <span class="text-red-500">*</span>
                                                </label>
                                                <select v-model="newSection.yearLevel" 
                                                        class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                                                        :disabled="isLoading"
                                                        required>
                                                    <option value="">Select Year Level</option>
                                                    <option value="1st Year">1st Year</option>
                                                    <option value="2nd Year">2nd Year</option>
                                                    <option value="3rd Year">3rd Year</option>
                                                    <option value="4th Year">4th Year</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <p class="text-sm text-gray-500">Instructor will be assigned later.</p>
                                        </div>
                                    </div>
                                    <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                                        <button type="submit"
                                                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm">
                                            Save
                                        </button>
                                        <button type="button"
                                                v-on:click="showAddScheduleModal = false"
                                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                                            Cancel
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </transition>
        </div>
    </div>

    <!-- Add Schedule Item Modal -->
    <div v-if="showAddScheduleItemModal" class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-gray-500 opacity-75" v-on:click="closeAddScheduleItemModal"></div>
            </div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Add Schedule Item</h3>
                            <form id="addScheduleItemForm" v-on:submit.prevent="saveScheduleItem">
                                @Html.AntiForgeryToken()
                                <!-- Error message -->
                                <div v-if="error" class="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                                    {{ error }}
                                </div>
                                
                                <div class="grid grid-cols-1 gap-4">
                                    <div class="grid grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Day <span class="text-red-500">*</span></label>
                                            <select v-model="newScheduleItem.day" required
                                                    class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                                <option value="">Select a day</option>
                                                <option value="Monday">Monday</option>
                                                <option value="Tuesday">Tuesday</option>
                                                <option value="Wednesday">Wednesday</option>
                                                <option value="Thursday">Thursday</option>
                                                <option value="Friday">Friday</option>
                                                <option value="Saturday">Saturday</option>
                                                <option value="Sunday">Sunday</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Start Time <span class="text-red-500">*</span></label>
                                            <input type="time" v-model="newScheduleItem.startTime" required
                                                   class="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">End Time <span class="text-red-500">*</span></label>
                                            <input type="time" v-model="newScheduleItem.endTime" required
                                                   class="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Room <span class="text-red-500">*</span></label>
                                            <input type="text" v-model="newScheduleItem.room" required
                                                   class="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                   placeholder="e.g., Room 101">
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Course <span class="text-red-500">*</span></label>
                                        <select v-model="newScheduleItem.courseId" required
                                                class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                            <option value="">Select a course</option>
                                            <option v-for="course in (selectedSection?.curriculum?.courses || [])" :key="course.code" :value="course.code">
                                                {{ course.code }} - {{ course.name }}
                                            </option>
                                        </select>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Instructor</label>
                                        <input type="text" v-model="newScheduleItem.instructor"
                                               class="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                               placeholder="Instructor name">
                                    </div>
                                </div>
                                
                                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse mt-4">
                                    <button type="submit"
                                            class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
                                            :disabled="isLoading">
                                        <span v-if="isLoading" class="mr-2">
                                            <svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                            </svg>
                                        </span>
                                        {{ isLoading ? 'Saving...' : 'Save Schedule Item' }}
                                    </button>
                                    <button type="button"
                                            v-on:click="closeAddScheduleItemModal"
                                            class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                                        Cancel
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const { createApp, ref, onMounted } = Vue;

        createApp({
            setup() {
                const sections = ref([]);
                const curricula = ref([]);
                const isLoading = ref(true);
                const error = ref(null);
                const showAddScheduleModal = ref(false);
                const showAddScheduleItemModal = ref(false);
                const selectedSection = ref(null);
                const currentActionInfo = ref({ type: null, id: null });
                
                const newSection = ref({
                    curriculumCode: '',
                    sectionName: '',
                    semester: '',
                    yearLevel: ''
                });
                
                const newScheduleItem = ref({
                    sectionId: '',
                    day: '',
                    startTime: '',
                    endTime: '',
                    courseId: '',
                    room: '',
                    instructor: 'To be assigned'
                });

                // Fetch curricula from the API
               const fetchCurricula = async () => {
                   try {
                       isLoading.value = true;
                       const response = await fetch('/Admin/GetCurricula');
                       if (!response.ok) throw new Error('Failed to fetch curricula');
                       curricula.value = await response.json();
                   } catch (err) {
                       console.error('Error fetching curricula:', err);
                       error.value = 'Failed to load curricula. Please try again later.';
                   } finally {
                       isLoading.value = false;
                   }
               };

                // Fetch sections from the API
                const fetchSections = async (curriculumCode = '', semester = '', yearLevel = '') => {
                    try {
                        isLoading.value = true;
                        // Build query parameters
                        const params = new URLSearchParams();
                        if (curriculumCode) params.append('curriculumCode', curriculumCode);
                        if (semester) params.append('semester', semester);
                        if (yearLevel) params.append('yearLevel', yearLevel);
                        
                        const response = await fetch(`/Admin/GetSections?${params.toString()}`);
                        if (!response.ok) {
                            const errorData = await response.json().catch(() => ({}));
                            throw new Error(errorData.message || 'Failed to fetch sections');
                        }
                        const data = await response.json();
                        // Ensure sections and their schedules/sessions are structured correctly
                        sections.value = data.map(section => {
                            const processedSchedules = (section.schedules || []).map(schedule => {
                                const processedSessions = (schedule.sessions || []).map(session => {
                                    return {
                                        ...session, // Spread existing session properties (should include id)
                                        // day: getDayName(session.day), // Assuming day is already a string like 'Monday' or handled by formatTime
                                        // startTime: formatTimeFromTimespan(session.startTime), // Handled by formatTime in template
                                        // endTime: formatTimeFromTimespan(session.endTime) // Handled by formatTime in template
                                    };
                                });
                                return {
                                    ...schedule, // Spread existing schedule properties
                                    sessions: processedSessions // Assign the processed sessions
                                };
                            });
                            return {
                                ...section,
                                schedules: processedSchedules
                            };
                        });
                    } catch (err) {
                        console.error('Error fetching sections:', err);
                        error.value = err.message || 'Failed to load sections. Please try again later.';
                    } finally {
                        isLoading.value = false;
                    }
                };

                // Create a new section
                const createSection = async () => {
                    try {
                        isLoading.value = true;
                        error.value = null;
                        
                        // Get anti-forgery token from the form
                        const form = document.getElementById('addSectionForm');
                        const token = form.querySelector('input[name="__RequestVerificationToken"]').value;
                        
                        const response = await fetch('/Admin/CreateSection', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify({
                                curriculumCode: newSection.value.curriculumCode,
                                sectionName: newSection.value.sectionName,
                                semester: newSection.value.semester,
                                yearLevel: newSection.value.yearLevel
                            })
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.message || 'Failed to create section');
                        }

                        // Refresh the sections list
                        await fetchSections();
                        
                        // Reset the form and close modal
                        newSection.value.curriculumCode = '';
                        newSection.value.sectionName = '';
                        newSection.value.semester = '';
                        newSection.value.yearLevel = '';
                        showAddScheduleModal.value = false;
                        
                    } catch (err) {
                        console.error('Error creating section:', err);
                        error.value = err.message || 'Failed to create section. Please try again.';
                    } finally {
                        isLoading.value = false;
                    }
                };

                // Open add schedule item modal
                const openAddScheduleItemModal = (section) => {
                    error.value = null;
                    selectedSection.value = section;
                    newScheduleItem.value = {
                        sectionId: section.id,
                        day: '',
                        startTime: '',
                        endTime: '',
                        courseId: '',
                        room: '',
                        instructor: 'To be assigned'
                    };
                    showAddScheduleItemModal.value = true;
                };
                
                // Close add schedule item modal
                const closeAddScheduleItemModal = () => {
                    showAddScheduleItemModal.value = false;
                    error.value = null;
                };
                
                // Edit schedule item
                const editScheduleItem = (section, schedule) => {
                    error.value = null;
                    selectedSection.value = section;
                    newScheduleItem.value = {
                        ...schedule,
                        // Ensure we have all required fields
                        sectionId: schedule.sectionId || section.id,
                        startTime: schedule.startTime ? schedule.startTime.substring(0, 5) : '',
                        endTime: schedule.endTime ? schedule.endTime.substring(0, 5) : ''
                    };
                    showAddScheduleItemModal.value = true;
                };

                // Confirm delete schedule item
                const confirmDeleteScheduleItem = async (section, session) => {
                    if (confirm('Are you sure you want to delete this schedule item?')) {
                        currentActionInfo.value = { type: 'delete', id: session.id };
                        try {
                            isLoading.value = true; // This can be for general loading, specific item loading is handled by currentActionInfo
                            error.value = null;
                            
                            // Get anti-forgery token
                            const tokenInput = document.querySelector('#globalAntiForgeryTokenForm input[name="__RequestVerificationToken"]');
                            const token = tokenInput ? tokenInput.value : null;
                            if (!token) {
                                throw new Error('Security token not found. Please refresh the page and try again.');
                            }
                            
                            const response = await fetch(`/Admin/DeleteScheduleItem/${session.id}`, {
                                method: 'DELETE',
                                headers: {
                                    'RequestVerificationToken': token
                                }
                            });

                            if (!response.ok) {
                                const errorData = await response.json();
                                throw new Error(errorData.message || 'Failed to delete schedule item');
                            }

                            // Refresh the sections list
                            await fetchSections();
                            
                            // Show success message
                            alert('Schedule item deleted successfully!');
                            
                        } catch (err) {
                            console.error('Error deleting schedule item:', err);
                            error.value = err.message || 'Failed to delete schedule item. Please try again.';
                        } finally {
                            isLoading.value = false;
                            currentActionInfo.value = { type: null, id: null };
                        }
                    }
                };

                // Format time from HH:MM to 12-hour format with AM/PM
                const formatTime = (timeStr) => {
                    if (!timeStr) return '';
                    
                    try {
                        // If it's already a TimeSpan string like '08:00:00', parse it
                        if (timeStr.includes(':')) {
                            const [hours, minutes] = timeStr.split(':');
                            const date = new Date();
                            date.setHours(parseInt(hours, 10));
                            date.setMinutes(parseInt(minutes, 10) || 0);
                            return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
                        }
                        return timeStr;
                    } catch (e) {
                        console.error('Error formatting time:', e);
                        return timeStr;
                    }
                };

                // Format TimeSpan string (HH:MM:SS) to 12-hour format
                const formatTimeFromTimespan = (timeSpan) => {
                    if (!timeSpan) return '';
                    try {
                        // Handle both string and TimeSpan object
                        const timeStr = typeof timeSpan === 'string' ? timeSpan : timeSpan.toString();
                        const [hours, minutes] = timeStr.split(':');
                        const date = new Date();
                        date.setHours(parseInt(hours, 10));
                        date.setMinutes(parseInt(minutes, 10) || 0);
                        return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
                    } catch (e) {
                        console.error('Error formatting TimeSpan:', e);
                        return timeSpan?.toString() || '';
                    }
                };

                // Convert day number to day name
                const getDayName = (dayNumber) => {
                    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                    return days[dayNumber] || 'N/A';
                };
                
                // Save schedule item
                const saveScheduleItem = async () => {
                    try {
                        isLoading.value = true;
                        error.value = null;
                        
                        // Basic validation
                        if (!newScheduleItem.value.day) {
                            throw new Error('Please select a day');
                        }
                        if (!newScheduleItem.value.startTime || !newScheduleItem.value.endTime) {
                            throw new Error('Please provide both start and end times');
                        }
                        if (!newScheduleItem.value.room) {
                            throw new Error('Please provide a room number');
                        }
                        if (!newScheduleItem.value.courseId) {
                            throw new Error('Please select a course');
                        }
                        
                        // Get anti-forgery token
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                        if (!token) {
                            throw new Error('Security token not found. Please refresh the page and try again.');
                        }
                        
                        // Map day names to numeric values (0=Sunday, 1=Monday, etc.)
                        const dayMap = {
                            'Sunday': 0,
                            'Monday': 1,
                            'Tuesday': 2,
                            'Wednesday': 3,
                            'Thursday': 4,
                            'Friday': 5,
                            'Saturday': 6
                        };

                        // Validate and prepare all fields
                        const sectionId = parseInt(selectedSection.value?.id || newScheduleItem.value.sectionId);
                        if (isNaN(sectionId) || sectionId <= 0) {
                            throw new Error('Invalid section ID');
                        }

                        const courseCode = newScheduleItem.value.courseId;
                        if (!courseCode) {
                            throw new Error('Please select a course');
                        }

                        const curriculumCode = selectedSection.value?.curriculumCode;
                        if (!curriculumCode) {
                            throw new Error('Curriculum code is missing');
                        }

                        // Get the day of week from the selected day
                        const dayName = newScheduleItem.value.day;
                        const dayOfWeek = dayMap[dayName];
                        
                        if (dayOfWeek === undefined) {
                            throw new Error('Please select a valid day of the week');
                        }

                        // Format times to HH:mm
                        const formatTime = (timeStr) => {
                            if (!timeStr) return '';
                            // If already in HH:mm format, return as is
                            if (/^\d{1,2}:\d{2}$/.test(timeStr)) {
                                return timeStr;
                            }
                            // Try to parse and format time
                            const time = new Date(`1970-01-01T${timeStr}`);
                            if (isNaN(time.getTime())) {
                                throw new Error('Invalid time format. Use HH:mm (24-hour format)');
                            }
                            return time.toTimeString().substring(0, 5);
                        };

                        const payload = {
                            courseCode: courseCode,
                            sectionId: sectionId,
                            curriculumCode: curriculumCode,
                            room: newScheduleItem.value.room || 'TBA',
                            instructor: newScheduleItem.value.instructor || 'TBA',
                            dayOfWeek: dayOfWeek,
                            startTime: formatTime(newScheduleItem.value.startTime),
                            endTime: formatTime(newScheduleItem.value.endTime)
                        };

                        const response = await fetch('/Admin/CreateSchedule', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify(payload)
                        });

                        const responseData = await response.json();
                        
                        if (!response.ok || !responseData.success) {
                            throw new Error(responseData.message || 'Failed to save schedule');
                        }

                        // Refresh the sections list to show the new schedule item
                        await fetchSections();
                        
                        // Close the modal and reset form
                        showAddScheduleItemModal.value = false;
                        newScheduleItem.value = {
                            sectionId: '',
                            day: '',
                            startTime: '',
                            endTime: '',
                            courseId: '',
                            room: '',
                            instructor: 'To be assigned'
                        };
                        
                        // Show success message
                        alert('Schedule item saved successfully!');
                        
                    } catch (error) {
                        console.error('Error in saveScheduleItem:', error);
                        error.value = error.message || 'Failed to save schedule item. Please try again.';
                    } finally {
                        isLoading.value = false;
                    }
                };

                // Initialize the component
                onMounted(async () => {
                    try {
                        await Promise.all([
                            fetchCurricula(),
                            fetchSections() // Fetch with empty parameters to get all sections initially
                        ]);
                    } catch (error) {
                        console.error('Error in onMounted:', error);
                        error.value = 'Failed to initialize data. Please refresh the page.';
                    }
                });

                return {
                    sections,
                    curricula,
                    newSection,
                    newScheduleItem,
                    showAddScheduleModal,
                    showAddScheduleItemModal,
                    selectedSection,
                    isLoading,
                    error,
                    createSection,
                    openAddScheduleModal,
                    closeAddScheduleItemModal,
                    saveScheduleItem,
                    editScheduleItem,
                    confirmDeleteScheduleItem,
                    formatTime,
                    getDayName,
                    currentActionInfo
                };
            }
        }).mount('#app');

        // Existing modal functions for the schedule modal
        function openAddScheduleModal(day) {
            document.getElementById('selectedDay').value = day;
            document.getElementById('modalDayTitle').textContent = day;
            document.getElementById('addScheduleModal').classList.remove('hidden');
        }

        function closeAddScheduleModal() {
            document.getElementById('addScheduleModal').classList.add('hidden');
        }

        function saveSchedule() {
            // Implementation for saving schedule
            closeAddScheduleModal();
        }
    </script>
</body>

</html>